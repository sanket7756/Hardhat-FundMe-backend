{
  "address": "0x74BB7219A6Ae035955E131A342720053e7Cc0c0a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe_NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9443a15f6bb38072a0841f4b73a0d5e91934c27adbaf5bbc2c8092ea1170e539",
  "receipt": {
    "to": null,
    "from": "0x415277A1b1Eb532EE2888A587b191488E1eC5971",
    "contractAddress": "0x74BB7219A6Ae035955E131A342720053e7Cc0c0a",
    "transactionIndex": 17,
    "gasUsed": "1117794",
    "logsBloom": "0x
    "blockHash": "0xa908f3ca7e05ffa88813ffd43726df364cff548bba03437c5af265f58571651c",
    "transactionHash": "0x9443a15f6bb38072a0841f4b73a0d5e91934c27adbaf5bbc2c8092ea1170e539",
    "logs": [],
    "blockNumber": 10925292,
    "cumulativeGasUsed": "5812309",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 2,
  "solcInputHash": "4a959c9135948d8c9e58d22fcb164b76",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe_NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Sanket\",\"details\":\"This implements price feeds as our library   \",\"kind\":\"dev\",\"methods\":{},\"title\":\"A Contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Functions order: constructor receive fallback external public internal private view/pure\"}},\"notice\":\"This contract is to demo a sample funding contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n// Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// Error Codes\\n// for error write the name of the contract and error that you will be getting\\nerror FundMe_NotOwner();\\n\\n// Interfaces,Libraries,Contracts\\n\\n/** @title A Contract for crowd funding\\n*   @author Sanket\\n*   @notice This contract is to demo a sample funding contracts\\n*   @dev This implements price feeds as our library\\n*   \\n*/\\n\\n\\ncontract FundMe {\\n    // Type Declarations \\n    using PriceConverter for uint256;\\n\\n    // State Variables\\n    mapping(address => uint256) public s_addressToAmountFunded;\\n    address[] public s_funders;\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address public /* immutable */ i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    \\n    AggregatorV3Interface public s_priceFeed;\\n\\n\\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe_NotOwner();\\n        _;\\n    }\\n\\n    /// Functions order:\\n    /// constructor\\n    /// receive\\n    /// fallback\\n    /// external\\n    /// public\\n    /// internal\\n    /// private\\n    /// view/pure\\n\\n    constructor(address priceFeed) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n    }\\n\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n    \\n    function getVersion() public view returns (uint256){\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\\n        return s_priceFeed.version();\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n    \\n    function withdraw() payable onlyOwner public {\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Transfer failed\\\");\\n    }\\n\\n    function cheaperWithdraw()public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory\\n        for(uint256 funderIndex = 0;funderIndex < funders.length;funderIndex++) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success,) = i_owner.call{value:address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\ \\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback() \\n    //     /   \\\\ \\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\",\"keccak256\":\"0x7960c82df9460e1b928d803f303f62a0ec7199cba2df908c69ded79ec7ef6184\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Rinkeby ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xb08cacff685ac548200bfc09092c746b3ed461289fdda7f570ec61a02f35dc87\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620013db380380620013db83398181016040528101906200003791906200012a565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b600060208284031215620001435762000142620000c0565b5b6000620001538482850162000113565b91505092915050565b61126f806200016c6000396000f3fe6080604052600436106100915760003560e01c80636b69a592116100595780636b69a592146101705780639e87a5cd1461019b578063b60d4288146101c6578063be2693f0146101d0578063dba6335f146101da57610091565b80630d8e6e2c146100965780630ec3b027146100c15780631bf6132d146100ec5780633ccfd60b1461012957806354861af714610133575b600080fd5b3480156100a257600080fd5b506100ab610205565b6040516100b89190610b30565b60405180910390f35b3480156100cd57600080fd5b506100d66102ac565b6040516100e39190610bca565b60405180910390f35b3480156100f857600080fd5b50610113600480360381019061010e9190610c28565b6102d2565b6040516101209190610b30565b60405180910390f35b6101316102ea565b005b34801561013f57600080fd5b5061015a60048036038101906101559190610c81565b61052c565b6040516101679190610cbd565b60405180910390f35b34801561017c57600080fd5b5061018561056b565b6040516101929190610b30565b60405180910390f35b3480156101a757600080fd5b506101b0610578565b6040516101bd9190610bca565b60405180910390f35b6101ce6105a2565b005b6101d86106dc565b005b3480156101e657600080fd5b506101ef61096e565b6040516101fc9190610cbd565b60405180910390f35b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561026f57600080fd5b505afa158015610283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a79190610ced565b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610371576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561041c5760006001828154811061039757610396610d1a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061041490610d78565b915050610374565b50600067ffffffffffffffff81111561043857610437610dc1565b5b6040519080825280602002602001820160405280156104665781602001602082028036833780820191505090505b506001908051906020019061047c929190610a70565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104a390610e21565b60006040518083038185875af1925050503d80600081146104e0576040519150601f19603f3d011682016040523d82523d6000602084013e6104e5565b606091505b5050905080610529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052090610e93565b60405180910390fd5b50565b6001818154811061053c57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006105e1600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461099490919063ffffffff16565b1015610622576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061990610eff565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106709190610f1f565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610763576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107e757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161079d575b5050505050905060005b815181101561087157600082828151811061080f5761080e610d1a565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061086990610d78565b9150506107f1565b50600067ffffffffffffffff81111561088d5761088c610dc1565b5b6040519080825280602002602001820160405280156108bb5781602001602082028036833780820191505090505b50600190805190602001906108d1929190610a70565b506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161091a90610e21565b60006040518083038185875af1925050503d8060008114610957576040519150601f19603f3d011682016040523d82523d6000602084013e61095c565b606091505b505090508061096a57600080fd5b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806109a0836109d0565b90506000670de0b6b3a764000085836109b99190610f75565b6109c39190610ffe565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a1957600080fd5b505afa158015610a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5191906110a7565b5050509150506402540be40081610a689190611122565b915050919050565b828054828255906000526020600020908101928215610ae9579160200282015b82811115610ae85782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a90565b5b509050610af69190610afa565b5090565b5b80821115610b13576000816000905550600101610afb565b5090565b6000819050919050565b610b2a81610b17565b82525050565b6000602082019050610b456000830184610b21565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610b90610b8b610b8684610b4b565b610b6b565b610b4b565b9050919050565b6000610ba282610b75565b9050919050565b6000610bb482610b97565b9050919050565b610bc481610ba9565b82525050565b6000602082019050610bdf6000830184610bbb565b92915050565b600080fd5b6000610bf582610b4b565b9050919050565b610c0581610bea565b8114610c1057600080fd5b50565b600081359050610c2281610bfc565b92915050565b600060208284031215610c3e57610c3d610be5565b5b6000610c4c84828501610c13565b91505092915050565b610c5e81610b17565b8114610c6957600080fd5b50565b600081359050610c7b81610c55565b92915050565b600060208284031215610c9757610c96610be5565b5b6000610ca584828501610c6c565b91505092915050565b610cb781610bea565b82525050565b6000602082019050610cd26000830184610cae565b92915050565b600081519050610ce781610c55565b92915050565b600060208284031215610d0357610d02610be5565b5b6000610d1184828501610cd8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d8382610b17565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610db657610db5610d49565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e0b600083610df0565b9150610e1682610dfb565b600082019050919050565b6000610e2c82610dfe565b9150819050919050565b600082825260208201905092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000610e7d600f83610e36565b9150610e8882610e47565b602082019050919050565b60006020820190508181036000830152610eac81610e70565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610ee9601b83610e36565b9150610ef482610eb3565b602082019050919050565b60006020820190508181036000830152610f1881610edc565b9050919050565b6000610f2a82610b17565b9150610f3583610b17565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f6a57610f69610d49565b5b828201905092915050565b6000610f8082610b17565b9150610f8b83610b17565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fc457610fc3610d49565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061100982610b17565b915061101483610b17565b92508261102457611023610fcf565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61104e8161102f565b811461105957600080fd5b50565b60008151905061106b81611045565b92915050565b6000819050919050565b61108481611071565b811461108f57600080fd5b50565b6000815190506110a18161107b565b92915050565b600080600080600060a086880312156110c3576110c2610be5565b5b60006110d18882890161105c565b95505060206110e288828901611092565b94505060406110f388828901610cd8565b935050606061110488828901610cd8565b92505060806111158882890161105c565b9150509295509295909350565b600061112d82611071565b915061113883611071565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561117757611176610d49565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156111b4576111b3610d49565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156111f1576111f0610d49565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561122e5761122d610d49565b5b82820290509291505056fea26469706673582212202d253f06b9ee521cdb4c621574ec4cb2d4884fea41a2cd09f1891b37f381041764736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c80636b69a592116100595780636b69a592146101705780639e87a5cd1461019b578063b60d4288146101c6578063be2693f0146101d0578063dba6335f146101da57610091565b80630d8e6e2c146100965780630ec3b027146100c15780631bf6132d146100ec5780633ccfd60b1461012957806354861af714610133575b600080fd5b3480156100a257600080fd5b506100ab610205565b6040516100b89190610b30565b60405180910390f35b3480156100cd57600080fd5b506100d66102ac565b6040516100e39190610bca565b60405180910390f35b3480156100f857600080fd5b50610113600480360381019061010e9190610c28565b6102d2565b6040516101209190610b30565b60405180910390f35b6101316102ea565b005b34801561013f57600080fd5b5061015a60048036038101906101559190610c81565b61052c565b6040516101679190610cbd565b60405180910390f35b34801561017c57600080fd5b5061018561056b565b6040516101929190610b30565b60405180910390f35b3480156101a757600080fd5b506101b0610578565b6040516101bd9190610bca565b60405180910390f35b6101ce6105a2565b005b6101d86106dc565b005b3480156101e657600080fd5b506101ef61096e565b6040516101fc9190610cbd565b60405180910390f35b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561026f57600080fd5b505afa158015610283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a79190610ced565b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610371576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561041c5760006001828154811061039757610396610d1a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061041490610d78565b915050610374565b50600067ffffffffffffffff81111561043857610437610dc1565b5b6040519080825280602002602001820160405280156104665781602001602082028036833780820191505090505b506001908051906020019061047c929190610a70565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104a390610e21565b60006040518083038185875af1925050503d80600081146104e0576040519150601f19603f3d011682016040523d82523d6000602084013e6104e5565b606091505b5050905080610529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052090610e93565b60405180910390fd5b50565b6001818154811061053c57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006105e1600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461099490919063ffffffff16565b1015610622576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061990610eff565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106709190610f1f565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610763576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107e757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161079d575b5050505050905060005b815181101561087157600082828151811061080f5761080e610d1a565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061086990610d78565b9150506107f1565b50600067ffffffffffffffff81111561088d5761088c610dc1565b5b6040519080825280602002602001820160405280156108bb5781602001602082028036833780820191505090505b50600190805190602001906108d1929190610a70565b506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161091a90610e21565b60006040518083038185875af1925050503d8060008114610957576040519150601f19603f3d011682016040523d82523d6000602084013e61095c565b606091505b505090508061096a57600080fd5b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806109a0836109d0565b90506000670de0b6b3a764000085836109b99190610f75565b6109c39190610ffe565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a1957600080fd5b505afa158015610a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5191906110a7565b5050509150506402540be40081610a689190611122565b915050919050565b828054828255906000526020600020908101928215610ae9579160200282015b82811115610ae85782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a90565b5b509050610af69190610afa565b5090565b5b80821115610b13576000816000905550600101610afb565b5090565b6000819050919050565b610b2a81610b17565b82525050565b6000602082019050610b456000830184610b21565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610b90610b8b610b8684610b4b565b610b6b565b610b4b565b9050919050565b6000610ba282610b75565b9050919050565b6000610bb482610b97565b9050919050565b610bc481610ba9565b82525050565b6000602082019050610bdf6000830184610bbb565b92915050565b600080fd5b6000610bf582610b4b565b9050919050565b610c0581610bea565b8114610c1057600080fd5b50565b600081359050610c2281610bfc565b92915050565b600060208284031215610c3e57610c3d610be5565b5b6000610c4c84828501610c13565b91505092915050565b610c5e81610b17565b8114610c6957600080fd5b50565b600081359050610c7b81610c55565b92915050565b600060208284031215610c9757610c96610be5565b5b6000610ca584828501610c6c565b91505092915050565b610cb781610bea565b82525050565b6000602082019050610cd26000830184610cae565b92915050565b600081519050610ce781610c55565b92915050565b600060208284031215610d0357610d02610be5565b5b6000610d1184828501610cd8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d8382610b17565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610db657610db5610d49565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e0b600083610df0565b9150610e1682610dfb565b600082019050919050565b6000610e2c82610dfe565b9150819050919050565b600082825260208201905092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000610e7d600f83610e36565b9150610e8882610e47565b602082019050919050565b60006020820190508181036000830152610eac81610e70565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610ee9601b83610e36565b9150610ef482610eb3565b602082019050919050565b60006020820190508181036000830152610f1881610edc565b9050919050565b6000610f2a82610b17565b9150610f3583610b17565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f6a57610f69610d49565b5b828201905092915050565b6000610f8082610b17565b9150610f8b83610b17565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fc457610fc3610d49565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061100982610b17565b915061101483610b17565b92508261102457611023610fcf565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61104e8161102f565b811461105957600080fd5b50565b60008151905061106b81611045565b92915050565b6000819050919050565b61108481611071565b811461108f57600080fd5b50565b6000815190506110a18161107b565b92915050565b600080600080600060a086880312156110c3576110c2610be5565b5b60006110d18882890161105c565b95505060206110e288828901611092565b94505060406110f388828901610cd8565b935050606061110488828901610cd8565b92505060806111158882890161105c565b9150509295509295909350565b600061112d82611071565b915061113883611071565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561117757611176610d49565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156111b4576111b3610d49565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156111f1576111f0610d49565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561122e5761122d610d49565b5b82820290509291505056fea26469706673582212202d253f06b9ee521cdb4c621574ec4cb2d4884fea41a2cd09f1891b37f381041764736f6c63430008080033",
  "devdoc": {
    "author": "Sanket",
    "details": "This implements price feeds as our library   ",
    "kind": "dev",
    "methods": {},
    "title": "A Contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Functions order: constructor receive fallback external public internal private view/pure"
      }
    },
    "notice": "This contract is to demo a sample funding contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}